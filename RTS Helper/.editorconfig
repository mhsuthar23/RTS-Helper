# Rules in this file were initially inferred by Visual Studio IntelliCode from the D:\Programas\RTS Helper\Código\RTS Helper\RTS Helper\ codebase based on best match to current usage at 20/11/2021
# You can modify the rules from these initially generated values to suit your own policies
# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[*.cs]

dotnet_diagnostic.CA1303.severity = none # CA1303: No pasar cadenas literal como parámetros localizados.
dotnet_diagnostic.CS1591.severity = none # CS1591: No alertar tipos o miembros públicamente accesibles sin Summary.
dotnet_diagnostic.CA1812.severity = none # CS1812: No alertar por clases de las que no se crea una instancia.
dotnet_diagnostic.IDE0040.severity = none # IDE0040: No alertar por clases de las que no se crea una instancia (igual que el anterior).
dotnet_diagnostic.CA1805.severity = none # CA1805: No iniciar variables con sus valores prederminados. Prefiero hacerlo para más claridad al ver la declaración y no tener pensar cuál es el valor predeterminado al estar revisando el código.
dotnet_diagnostic.CS8524.severity = none # CS8524: La expresión switch no controla algunos valores de su tipo de entrada (no es exhaustiva). Esta advertencia por lo general no es muy útil porque obliga a agregar un caso predeterminado "_ => throw exception"" a los switchs con enumeraciones. Es más útil la advertencia CS8509 que solo sugiere agregar los casos faltantes de la enumeración. Esta advertencia es útil en los casos en los que se usan enumeraciones con flags https://docs.microsoft.com/en-us/dotnet/api/system.flagsattribute.

dotnet_diagnostic.IDE0130.severity = none # IDE0130: Para que no exija que un espacio de nombres tenga que coincidir con la estructura de las carpetas donde está almacenado el archivo (.cs) donde se usa este espacio de nombres.
dotnet_diagnostic.IDE0022.severity = none # IDE0022: Para que no exija que los métodos tengan que llevar llaves.
dotnet_diagnostic.IDE0008.severity = none # IDE0008: Para que no exija que use un tipo explícito en vez de var.
dotnet_diagnostic.IDE0011.severity = none # IDE0011: Para que no exija que agregue llaves después de un if de una sola línea.
dotnet_diagnostic.IDE0048.severity = none # IDE0048: Para que no exija ponerle paréntesis a operaciones tan simples como a * b + c * d.
dotnet_diagnostic.IDE0058.severity = none # IDE0058: Para que no exija que al usar un método que devuelve un valor se tenga que usar valor de descarte, así _ = Método(); y se pueda usar así Método();.
dotnet_diagnostic.IDE0072.severity = none # IDE0072: Para que no exija poner el caso de de excepción en los switch, para las enumeraciones ya se maneja con CS8509.
dotnet_diagnostic.IDE0061.severity = none # IDE0061: Para que no exija poner paréntesis en funciones locales de una sola línea.

# Tratar advertencias de nullables como errores. Se deben establecer aquí estas reglas porque por alguna razón no funcionan <WarningsAsErrors>nullable</WarningsAsErrors> en el archivo *.csproj. Los códigos se toman de la segunda respuesta aquí https://stackoverflow.com/questions/58194983/how-to-treat-all-c-sharp-8-nullable-reference-warnings-as-errors.

dotnet_diagnostic.CS8600.severity = error
dotnet_diagnostic.CS8601.severity = error
dotnet_diagnostic.CS8602.severity = error
dotnet_diagnostic.CS8603.severity = error
dotnet_diagnostic.CS8604.severity = error
dotnet_diagnostic.CS8613.severity = error
dotnet_diagnostic.CS8614.severity = error
dotnet_diagnostic.CS8619.severity = error
dotnet_diagnostic.CS8620.severity = error
dotnet_diagnostic.CS8622.severity = error
dotnet_diagnostic.CS8625.severity = error
dotnet_diagnostic.CS8629.severity = error
dotnet_diagnostic.CS8633.severity = error
dotnet_diagnostic.CS8767.severity = error

# Tratar advertencias de nullables como errores>




#Core editorconfig formatting - indentation

#use soft tabs (spaces) for indentation
indent_style = space

#Formatting - indentation options

#indent switch case contents.
csharp_indent_case_contents = true
#indent switch labels
csharp_indent_switch_labels = true

#Formatting - new line options

#place catch statements on the same line
csharp_new_line_before_catch = false
#place else statements on the same line
csharp_new_line_before_else = false
#require members of object initializers to be on the same line
csharp_new_line_before_members_in_object_initializers = false

#Formatting - organize using options

#do not place System.* using directives before other using directives
dotnet_sort_system_directives_first = false

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Formatting - wrapping options

#leave code block on single line
csharp_preserve_single_line_blocks = true
#leave statements and member declarations on the same line
csharp_preserve_single_line_statements = true

#Style - Code block preferences

#prefer no curly braces if allowed
csharp_prefer_braces = false:suggestion

#Style - expression bodied member options

#prefer expression-bodied members for accessors
csharp_style_expression_bodied_accessors = true:suggestion
#prefer expression-bodied members for methods
csharp_style_expression_bodied_methods = true:suggestion
#prefer expression-bodied members for properties
csharp_style_expression_bodied_properties = true:suggestion

#Style - expression level options

#prefer out variables to be declared inline in the argument list of a method call when possible
csharp_style_inlined_variable_declaration = true:suggestion
#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - Expression-level  preferences

#prefer default over default(T)
csharp_prefer_simple_default_expression = true:suggestion
#prefer objects to not be initialized using object initializers
dotnet_style_object_initializer = false:suggestion

#Style - implicit and explicit types

#prefer var over explicit type in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = true:suggestion
#prefer var is used to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = true:suggestion
#prefer var when the type is already mentioned on the right-hand side of a declaration expression
csharp_style_var_when_type_is_apparent = true:suggestion

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - modifier options

#prefer accessibility modifiers to be declared except for public interface members. This will currently not differ from always and will act as future proofing for if C# adds default interface methods.
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

#Style - Modifier preferences

#when this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = public,private,static,readonly:suggestion

#Style - Pattern matching

#prefer pattern matching instead of is expression with type casts
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

#Style - qualification options

#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = false:suggestion
#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = false:suggestion
#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = false:suggestion
